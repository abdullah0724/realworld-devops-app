version: '3.8'

services:
  postgres:
    container_name: database
    ports:
      - "5431:5432"
    image: postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./docker_test_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 80s

  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "7999:5000"
    command: bash -c "npx prisma migrate reset --force && npm start"
    environment:
      DATABASE_URL: "${DATABASE_URL}"
      PORT: "${SERVER_PORT}"
    depends_on:
      postgres:
        condition: service_healthy

  client2:
    container_name: client2
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_SERVER_URL: ${VITE_SERVER_URL}
    command: bash -c "npm run preview"
    ports:
      - "4172:4173"
    depends_on:
      - server

  client-service:
    container_name: "client"
    build:
      context: ./client/.
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    networks:
      - mynetwork
    depends_on:
      - api-service-1
      - api-service-2

  api-service-1:
    container_name: "api-1"
    build:
      context: ./api/.
      dockerfile: Dockerfile
    environment:
      - SERVICE_NAME=api-service-1
      - PORT=${API_SERVER_INTERNAL_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_TABLE=${MYSQL_TABLE}
    networks:
      - mynetwork
    depends_on:
      - db
      - redis
      - worker-service

  api-service-2:
    container_name: "api-2"
    build:
      context: ./api/.
      dockerfile: Dockerfile
    environment:
      - SERVICE_NAME=api-service-2
      - PORT=${API_SERVER_INTERNAL_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_TABLE=${MYSQL_TABLE}
    networks:
      - mynetwork
    depends_on:
      - db
      - redis
      - worker-service

  worker-service:
    container_name: "worker"
    build: ./worker/.
    environment:
      - PORT=5002
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USERNAME=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_TABLE=${MYSQL_TABLE}
    networks:
      - mynetwork
    depends_on:
      - db
      - redis

  db:
    container_name: "db"
    build: ./db/.
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    networks:
      - mynetwork

  redis:
    container_name: "redis"
    image: "redis:latest"
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass mypassword
    networks:
      - mynetwork

  nginx:
    container_name: nginx_server
    build:
      context: ./nginx/.
      dockerfile: Dockerfile
    ports:
      - ${NGINX_EXTERNAL_PORT}:${NGINX_INTERNAL_PORT}
    environment:
      - CLIENT_APP_INTERNAL_PORT=${CLIENT_APP_INTERNAL_PORT}
      - API_SERVER_INTERNAL_PORT=${API_SERVER_INTERNAL_PORT}
    networks:
      - mynetwork
    depends_on:
      - client-service
      - api-service-1
      - api-service-2

networks:
  mynetwork:
    driver: bridge

